#!/usr/bin/python3
# SPDX-License-Identifier: MIT

import argparse
import sys


def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description="amd-s2idle hook",
    )

    parser.add_argument(
        "action",
        choices=["pre", "post", "test"],
        help="Action to perform",
    )

    parser.add_argument(
        "mode",
        help="Mode to perform",
    )

    parser.add_argument("--count")
    parser.add_argument("--log", default="/dev/null")
    parser.add_argument(
        "--duration",
    )
    parser.add_argument(
        "--wait",
    )
    parser.add_argument(
        "--force",
        action="store_true",
    )
    parser.add_argument(
        "--debug",
        action="store_true",
    )
    parser.add_argument(
        "--random",
        action="store_true",
    )
    parser.add_argument("--logind", action="store_true")
    parser.add_argument("--path", default="%PATH%")

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    if args.path:
        sys.path.append(args.path)

    try:
        from amd_debug.validator import (
            SleepValidator,
        )  # pylint: disable=import-outside-toplevel
        from amd_debug.prerequisites import (
            PrerequisiteValidator,
        )  # pylint: disable=import-outside-toplevel
    except ModuleNotFoundError:
        sys.exit(0)

    app = SleepValidator(args.log, args.debug)
    if args.action == "pre":
        if args.mode == "suspend":
            prereq = PrerequisiteValidator(log_file=args.log, debug=args.debug)
            prereq.capture_once()
            app.systemd_pre_hook()
        sys.exit(0)

    if args.action == "post":
        if args.mode == "suspend":
            app.systemd_post_hook()
        sys.exit(0)

    if args.action == "test":
        if not args.count or not args.duration or not args.wait:
            sys.exit("Must specify count, duration and args")

        app = PrerequisiteValidator(log_file=args.log, debug=args.debug)
        if app.run() or args.force:
            app = SleepValidator(log_file=args.log, debug=args.debug)
            app.run(
                duration=int(args.duration),
                wait=int(args.wait),
                count=int(args.count),
                rand=args.random,
                logind=args.logind,
            )
            sys.exit(0)
        sys.exit(1)
